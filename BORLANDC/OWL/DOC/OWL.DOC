===========================================================================
ObjectWindows for C++
===========================================================================

                    This file contains important information about
                    ObjectWindows for C++, an application framework that
                    will ease the development of applications for Windows
                    3.0. For the latest information about ObjectWindows for
                    C++, the accompanying example programs, and
                    documentation, read this entire file.


          Features  =======================================================

                    ObjectWindows for C++, also known as the ObjectWindows
                    libraries (OWL) includes the following important
                    features:


------------------  DDVTs provide a simple alternative to the traditional
  DYNAMIC DISPATCH  method of writing a window procedure to responding to
    VIRTUAL TABLES  Windows messages. Typically, a window procedure
           (DDVTs)  consists of a lengthy switch statement with a case for
------------------  every Windows message to which you require a response.
                    By using DDVTs, you respond to a Windows message by
                    writing a member function of the C++ class associated
                    with your window. Using DDVTs, your derived classes
                    will not be encumbered with virtual table entries for
                    all windows messages handled by the derived class and
                    all base classes. DDVTs encode only the changed virtual
                    member functions to keep virtual tables small.


------------------  OWL includes support for streamable (persistent)
       SUPPORT FOR  objects. The stream manager lets you save objects
STREAMABLE OBJECTS  either in memory or file streams so that they persist
------------------  beyond their normal lifespan.


------------------  The Borland Windows Custom Control Library (BWCC.DLL)
    BORLAND CUSTOM  provided with this release allows you to build your own
          CONTROLS  Windows programs using the fancy dialog boxes and
------------------  controls provided with such Borland Windows products as
                    the Resource Workshop, Turbo Pascal for Windows, and
                    Turbo C++ for Windows.


------------------  OWL provides the ability to produce your own OWL DLLs
      DYNAMIC LINK  and use classes and functions from these DLLs in your
  LIBRARIES (DLLs)  OWL applications.
------------------
                    In addition to OWL.DLL, this version includes dynamic
                    link library versions of BWCC (Borland Windows Custom
                    Controls), and BC30RTL (the Borland C++ run-time






                    libraries within a DLL). More information on these
                    appears below.


------------------  We provide Help files containing reference information
       ONLINE HELP  on the ObjectWindows and Streamable classes. The Help
------------------  files are provided in two formats: one that is
                    compatible with THELP and the DOS IDE and one that is
                    compatible with the Windows Help engine (WINHELP).


------------------  To significantly improve the performance of dynamic
       GLOBAL HEAP  heap allocations under Windows, the BC RTL provides new
     SUBALLOCATION  versions of the farmalloc, farfree, farrealloc, and
------------------  farcalloc functions which suballocate Windows global
                    heap blocks. To take advantage of these functions, you
                    need only use 'new' and 'delete' as usual.


         IMPORTANT  =======================================================
       INFORMATION


------------------  The User's Guide includes a step-by-step tutorial that
     OBJECTWINDOWS  quickly introduces readers to many of the important
      USER'S GUIDE  features of OWL and gets them off to a good start in
------------------  OWL programming.

                    In your OWL\DOC directory, there is a MANUAL.DOC file
                    that contains updated information and corrections for
                    the ObjectWindows User's Guide.

                    In OWL\DOC, you will also find a file, OWLDLL.DOC, that
                    contains a new chapter on using and building dynamic
                    link libraries.

                    The BWCC-OWL.DOC file in OWL\DOC, and BWCCAPI.RW and
                    BWCCSTYL.RW files in BORLANDC\DOC contain information
                    on using the Borland Custom Controls with OWL.

                    If you have any questions that are not answered in the
                    manuals, check out this README file and the HELPME!.DOC
                    file, which discusses questions and problems that OWL
                    programmers may encounter.


------------------  The Borland Windows Custom Control Library (BWCC.DLL)
    BORLAND CUSTOM  is provided with this release, along with its import
          CONTROLS  library (BWCC.LIB). To use BWCC, you must specify the
------------------  Windows class name of any control you want to use in
                    your resource files.

                    Whether you use BWCC from an OWL program or not, you
                    will have to ensure that BWCC.DLL is dynamically loaded



                                   - 2 -






                    along with your program. The suggested way to do this
                    is to update your program to make a call to
                    BWCCGetVersion (defined in BORLANDC\INCLUDE\BWCC.H)
                    from somewhere within your program. This will cause an
                    imported reference to BWCC.DLL which will, in turn,
                    cause the Windows loader to load BWCC.DLL along with
                    your program (if it is not already loaded).

                    The CHECKERS and TTT (TicTacToe) games in the
                    OWL\EXAMPLES directory use the Borland Windows Custom
                    Controls.

                    See the files BWCC-OWL.DOC in the OWL\DOC subdirectory
                    and BWCCAPI.RW and BWCCSTYL.RW files in BORLANDC\DOC
                    for more information on using the Borland Custom
                    Controls.


------------------  If you use DLLs, remember that they must be located in
       DLL SUPPORT  a directory in your path (eg, c:\BORLANDC\BIN or
------------------  c:\WINDOWS) or in the directory of the .EXE which
                    invokes them.

                    By default, the INSTALL program will place OWL.DLL,
                    OWL.TDS, and BC30RTL.DLL in your BORLANDC\BIN directory
                    and BWCC.DLL in your WINDOWS\SYSTEM directory.

                    If you want to build the example programs to use the
                    statically linked libraries rather than OWL.DLL (the
                    default for the makefile in OWL\EXAMPLES), you should
                    define the USESTATIC macro on the make command line:

                         make -DUSESTATIC

                    If you are using OWL.DLL, or any ObjectWindows DLL that
                    you have built, you must use large model for both the
                    DLLs and the EXEs which use them. Also, if you link
                    your program to you use OWL.DLL, then it should also be
                    linked to use BC30RTL.DLL; CRTLDLL.LIB is the import
                    library for BC30RTL.DLL.

                    If you want to build your own DLLs with OWL, we
                    recommend that you check out the USECDLL and CALLDLL
                    example programs.

                    The USECDLL example program demonstrates the use of a
                    cooperating OWL EXE and DLL using an object interface
                    (that is, shared classes). The CALLDLL example program
                    shows an OWL EXE making a call into an OWL DLL using a
                    functional interface. The USECDLL2 shows a non-OWL EXE
                    calling into an OWL DLL.

                    If you want to define your own shared classes, define
                    the _CLASSDLL macro in the Defines text box of the



                                   - 3 -






                    Options|Compiler|Code Generation dialog box or on the
                    compiler command line to signify that the module being
                    compiled will use classes in a DLL or will pass classes
                    into a DLL. Other macros, notably _CLASSTYPE, _EXPORT,
                    and _FAR, will check to see if _CLASSDLL has been
                    defined.

                    Use the _EXPORT macro (defined in
                    OWL\INCLUDE\OWLDEFS.H) in the definitions of your
                    shared classes. It will expand into either '_CLASSTYPE'
                    (when compiling an .EXE file) or '_export' (when
                    compiling a .DLL module). Typical usage might be:

                         _CLASSDEF(TMyClass)
                         class _EXPORT TMyClass
                         {
                              // whatever...
                         };

                    The _CLASSTYPE macro (defined in
                    BORLANDC\INCLUDE\_DEFS.H) expands into either "huge",
                    "far", or "near" as appropriate. If the __DLL__ or
                    _CLASSDLL macro is defined, _CLASSTYPE expands into
                    "huge", since huge classes are required when classes
                    are passed between an EXE and a DLL or between two DLLs
                    (a huge class is a class which has a far 'this' pointer
                    and a far virtual table pointer).

                    External functions that are exported from a library
                    when it is built as a DLL should be declared with
                    _EXPFUNC. This macro is defined in OWLDEFS.H and
                    expands into '_export' when the source it appears in is
                    compiled for a DLL(-WDE or -WD would be used if built
                    with the command line compiler); otherwise, _EXPFUNC is
                    replaced with the null string. For example, the
                    following declaration appears in the APPLICAT.H header
                    file:

                         extern PTApplication _EXPFUNC
                    GetApplicationObject();


                    Note that OWL DLLs may only be built in large model.

                    Also note that, if you build an OWL application (.EXE)
                    that uses one or more OWL DLLs, you must dynamically
                    link your EXE with OWL and BC30RTL. You cannot
                    statically link your EXE with the OWLWx.LIB static link
                    libraries.

                    More information on DLLs appears in the OWLDLL.DOC file
                    in OWL\DOC.





                                   - 4 -






------------------  We provide the complete source code and makefiles
       SOURCE CODE  needed for building the ObjectWindows (static and
------------------  dynamic link) libraries. When building the OWL
                    libraries yourself, the .OBJ files produced will be
                    placed in appropriate subdirectories of OWL\OBJECT by
                    the makefile.

                    For example, the .OBJ files for the small memory model
                    will be put in OWL\OBJECT\WS, while those for large
                    model DLL will be placed in in OWL\OBJECT\DL.

------------------  The OWL\EXAMPLES subdirectory contains many sample
  EXAMPLE PROGRAMS  programs that will help you get started in writing OWL
------------------  programs. The 'test' apps are typically short programs
                    providing code samples that demonstrate various OWL
                    classes and their features; these often correspond to
                    discussions in the User's Guide. The longer, more
                    useful and interesting apps include MFILEAPP (an MDI
                    editor), BONK (a game), and PROGTALK (a DDE client that
                    can add items and groups to the Windows program manager
                    (a DDE server)). The TTT (TicTacToe) and CHECKERS
                    examples make use of the Borland Windows Custom
                    Controls. Using a dialog as a main window of a program
                    is demonstrated in the SYSINFO (system information),
                    CALC (calculator), and CURSOR (window information)
                    examples.

                    We provide a MAKEFILE for building the examples. You
                    may want to use this as a template for writing your own
                    makefiles. The MAKEFILE uses a make include file,
                    MAKEFILE.INC, which defines the macros used by the
                    makefiles in OWL\EXAMPLES and its subdirectories. If
                    you installed OWL under your BORLANDC directory (the
                    default), and if your BORLANDC subdirectories use the
                    default names (BIN, INCLUDE, LIB, CLASSLIB), then you
                    will only have to redefine the BCROOT macro within
                    MAKEFILE.INC to use these makefiles.

                    The OWL\EXAMPLES subdirectory also contains project
                    (.PRJ) files for building the sample programs with the
                    IDE. If you didn't use the standard directories when
                    you installed Borland C++ or OWL, and you want to build
                    example programs that come with .PRJ files, you may
                    have to change the .PRJ file to reflect your actual
                    directory setup. Do this from in the IDE with the
                    Options|Directories dialog box.











                                   - 5 -






------------------  The OWL directory contains a batch file BUILDOWL.BAT
      BUILDING THE  which you can use to build both the class libraries and
     LIBRARIES AND  the OWL libraries. This batch file invokes the makefile
       SAMPLE CODE  in the OWL\SOURCE directory.
------------------
                    If you installed Borland C++ in a directory other than
                    the default (C:\BORLANDC), you will need to change the
                    macro definition

                         BCROOT=c:\borlandc

                    in the makefiles to use that other directory.

                    The install program installs OWL, by default, in
                    C:\BORLANDC\OWL. The makefiles are currently set up to
                    assume OWL was installed in the directory OWL under
                    your Borland C++ directory (the macro BCROOT). You will
                    need to update the OWLROOT macro (which defaults to
                    $(BCROOT)\OWL) in all the makefiles to read:

                         OWLROOT=d:\owl

                    (or wherever) if you told INSTALL to place OWL
                    somewhere else.

                    These changes are necessary to enable the makefile and
                    the compiler to find the appropriate include files and
                    libraries that are needed to build your OWL programs.
                    If you do not want to edit the makefile to make this
                    change, you can redefine these on the make command
                    line; for example,

                         make -DBCROOT=d:\borlandc -DOWLROOT=d:\owl

                    would change the definitions of the BCROOT and OWLROOT
                    make macros to he example programs each have a project
                    file. After you have opened a project in the IDE, you
                    should check the Options|Directories dialog; you may
                    have to change part of the INCLUDE and LIB selections
                    if C:\BORLANDC is not the directory in which you
                    installed Borland C++.

                    If you are in a directory containing source or sample
                    code, you can build it by simply running

                         make

                    To build the programs using the static link libraries
                    for a specific memory model, use

                         make -DUSESSTATIC -DMODEL=x






                                   - 6 -






                    where x is one of s, m, or l. The makefiles in the
                    OWL\EXAMPLES directory default to small model when the
                    OWL static libraries are used and to large model when
                    the OWL DLL is used.

                    To build the examples using OWL.DLL, use

                         make -DMODEL=l -DUSEDLL

                    or simply,

                         make

                    (the USEDLL macro is defined by default; if USEDLL is
                    defined, MODEL is defined to be

                    For faster compilations, we recommend that you use the
                    precompiled headers option. You can add this to a
                    makefile, by adding

                         -H

                    to the CFLAGS macro in the makefile.

   OTHER IMPORTANT  =======================================================
             NOTES
                    o Note that correct usage of the transfer mechanism for
                      TComboBox and TListBox differs somewhat from transfer
                      buffer usage for otherwindow objects. The
                      CBXTTEST.CPP and LBXTTEST.CPP example programs
                      demonstrate the correct usage of the transfer
                      mechanism with TComboBoxData and TListBoxData.

                    o The TListBox functions which are described as being
                      for single-selection list boxes are inherited by
                      TComboBox and can also be used by combo boxes.





















                                   - 7 -

